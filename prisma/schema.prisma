generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model FuelType {
  id           Int            @id @default(autoincrement())
  name         String         @unique
  tanks        Tank[]
  pumps        Pump[]
  prices       Price[]
  credits ClientCredit[]
}

model Tank {
  id           Int            @id @default(autoincrement())
  name         String
  capacityLit  Decimal
  fuelTypeId   Int
  fuelType     FuelType       @relation(fields: [fuelTypeId], references: [id])
  currentLevel Decimal        @default(0)
  avgUnitCost  Decimal        @default(0)
  purchases    Purchase[]
  prices       PurchasePrice[]
}

model Pump {
  id           Int            @id @default(autoincrement())
  name         String
  fuelTypeId   Int
  fuelType     FuelType       @relation(fields: [fuelTypeId], references: [id])
  isActive     Boolean        @default(true)
  readings     DailyReading[]
  sales        Sale[]
  cashReceipts CashReceipt[]
}

model Price {
  id         Int      @id @default(autoincrement())
  fuelTypeId Int
  fuelType   FuelType @relation(fields: [fuelTypeId], references: [id])
  perLitre   Decimal
  active     Boolean  @default(true)
  createdAt  DateTime @default(now())
}

model Client {
  id            Int            @id @default(autoincrement())
  name          String
  ownerName     String
  phone         String         @unique
  email         String?        @unique
  address       String?
  creditLimit   Decimal        @default(0)
  balance       Decimal        @default(0)
  active        Boolean        @default(true)
  sales         Sale[]
  ledgerEntries LedgerEntry[]
  credits       ClientCredit[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Sale {
  id            Int      @id @default(autoincrement())
  pumpId        Int
  pump          Pump     @relation(fields: [pumpId], references: [id])
  litres        Decimal
  pricePerLitre Decimal
  totalAmount   Decimal
  costPerLitre  Decimal  @default(0)
  profit        Decimal  @default(0)
  method        String
  clientId      Int?
  client        Client?  @relation(fields: [clientId], references: [id])
  note          String?
  createdAt     DateTime @default(now())
}

model LedgerEntry {
  id        Int      @id @default(autoincrement())
  clientId  Int
  client    Client   @relation(fields: [clientId], references: [id])
  amount    Decimal // positive means client owes, negative means payment
  memo      String?
  createdAt DateTime @default(now())
}

model Purchase {
  id        Int      @id @default(autoincrement())
  tankId    Int
  tank      Tank     @relation(fields: [tankId], references: [id])
  litres    Decimal
  unitCost  Decimal
  totalCost Decimal
  date      DateTime?
  createdAt DateTime @default(now())
}

model DailyReading {
  id            Int      @id @default(autoincrement())
  pumpId        Int
  pump          Pump     @relation(fields: [pumpId], references: [id])
  date          DateTime
  openingLitres Decimal
  closingLitres Decimal
  pricePerLitre Decimal
  revenue       Decimal  @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@unique([pumpId, date])
}

model DailyReceipt {
  id          Int      @id @default(autoincrement())
  date        DateTime @unique
  cashTotal   Decimal  @default(0)
  onlineTotal Decimal  @default(0)
  note        String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model ClientCredit {
  id            Int      @id @default(autoincrement())
  clientId     Int
  client        Client   @relation(fields: [clientId], references: [id])
  fuelTypeId    Int
  fuelType      FuelType @relation(fields: [fuelTypeId], references: [id])
  litres        Decimal
  pricePerLitre Decimal
  totalAmount   Decimal
  date          DateTime
  note          String?
  status        String   @default("unpaid")
  paidDate      DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model PurchasePrice {
  id        Int      @id @default(autoincrement())
  tankId    Int
  tank      Tank     @relation(fields: [tankId], references: [id])
  price     Decimal
  createdAt DateTime @default(now())
}

model CashReceipt {
  id        Int      @id @default(autoincrement())
  pumpId    Int
  pump      Pump     @relation(fields: [pumpId], references: [id])
  date      DateTime
  amount    Decimal
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([pumpId, date])
}

model OnlinePayment {
  id          Int      @id @default(autoincrement())
  date        DateTime
  amount      Decimal
  method      String   // UPI, CARD, NET_BANKING
  reference   String?
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model AuditLog {
  id         Int      @id @default(autoincrement())
  action     String
  entityType String
  entityId   Int
  oldValues  Json?
  newValues  Json?
  reason     String?
  timestamp  DateTime @default(now())
  userId     Int?
  sessionId  String?

  @@index([entityType, entityId])
  @@index([timestamp])
  @@index([action])
  @@map("AuditLog")
}

// Configure Decimal type mapping
// For SQLite, Prisma uses Decimal.js runtime
