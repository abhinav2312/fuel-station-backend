generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ===========================================
// CORE ENTITIES
// ===========================================

model FuelType {
  id           Int            @id @default(autoincrement())
  name         String         @unique
  description  String?
  isActive     Boolean        @default(true)
  
  // Relations
  tanks        Tank[]
  pumps        Pump[]
  prices       Price[]
  credits      ClientCredit[]
  sales        Sale[]
  
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @default(now()) @updatedAt
}

model Tank {
  id           Int            @id @default(autoincrement())
  name         String
  capacityLit  Decimal
  currentLevel Decimal        @default(0)
  avgUnitCost  Decimal        @default(0)
  isActive     Boolean        @default(true)
  
  // Relations
  fuelTypeId   Int
  fuelType     FuelType       @relation(fields: [fuelTypeId], references: [id])
  purchases    Purchase[]
  
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @default(now()) @updatedAt
}

model Pump {
  id           Int            @id @default(autoincrement())
  name         String
  isActive     Boolean        @default(true)
  
  // Relations
  fuelTypeId   Int
  fuelType     FuelType       @relation(fields: [fuelTypeId], references: [id])
  readings     DailyReading[]
  sales        Sale[]
  cashReceipts CashReceipt[]
  
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @default(now()) @updatedAt
}

// ===========================================
// PRICING
// ===========================================

model Price {
  id         Int      @id @default(autoincrement())
  perLitre   Decimal
  isActive   Boolean  @default(true)
  
  // Relations
  fuelTypeId Int
  fuelType   FuelType @relation(fields: [fuelTypeId], references: [id])
  
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  @@index([fuelTypeId, isActive])
}

// ===========================================
// CUSTOMERS
// ===========================================

model Client {
  id            Int            @id @default(autoincrement())
  name          String
  ownerName     String
  phone         String         @unique
  email         String?        @unique
  address       String?
  creditLimit   Decimal        @default(0)
  balance       Decimal        @default(0)
  isActive      Boolean        @default(true)
  
  // Relations
  sales         Sale[]
  credits       ClientCredit[]
  payments      ClientPayment[]
  
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

// ===========================================
// SALES & TRANSACTIONS
// ===========================================

model Sale {
  id            Int      @id @default(autoincrement())
  litres        Decimal
  pricePerLitre Decimal
  totalAmount   Decimal
  costPerLitre  Decimal  @default(0)
  profit        Decimal  @default(0)
  paymentMethod String   // CASH, UPI, CARD, CREDIT
  note          String?
  
  // Relations
  pumpId        Int
  pump          Pump     @relation(fields: [pumpId], references: [id])
  fuelTypeId    Int
  fuelType      FuelType @relation(fields: [fuelTypeId], references: [id])
  clientId      Int?
  client        Client?  @relation(fields: [clientId], references: [id])
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@index([pumpId, createdAt])
  @@index([clientId, createdAt])
}

model DailyReading {
  id            Int      @id @default(autoincrement())
  openingLitres Decimal
  closingLitres Decimal
  pricePerLitre Decimal
  revenue       Decimal  @default(0)
  
  // Relations
  pumpId        Int
  pump          Pump     @relation(fields: [pumpId], references: [id])
  
  date          DateTime
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@unique([pumpId, date])
  @@index([date])
}

// ===========================================
// PAYMENTS & RECEIPTS
// ===========================================

model CashReceipt {
  id        Int      @id @default(autoincrement())
  amount    Decimal
  collectedBy String?
  note      String?
  
  // Relations
  pumpId    Int
  pump      Pump     @relation(fields: [pumpId], references: [id])
  
  date      DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([pumpId, date])
  @@index([date])
}

model OnlinePayment {
  id          Int      @id @default(autoincrement())
  amount      Decimal
  method      String   // UPI, CARD, NET_BANKING
  reference   String?
  description String?
  
  date        DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([date])
}

model ClientPayment {
  id            Int      @id @default(autoincrement())
  amount        Decimal
  paymentMethod String   // CASH, UPI, CARD
  reference     String?
  note          String?
  
  // Relations
  clientId      Int
  client        Client   @relation(fields: [clientId], references: [id])
  
  date          DateTime
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@index([clientId, date])
}

// ===========================================
// CREDIT MANAGEMENT
// ===========================================

model ClientCredit {
  id            Int      @id @default(autoincrement())
  litres        Decimal
  pricePerLitre Decimal
  totalAmount   Decimal
  status        String   @default("unpaid") // unpaid, paid
  paymentMethod String?  // UPI, Worker, Owner
  note          String?
  
  // Relations
  clientId      Int
  client        Client   @relation(fields: [clientId], references: [id])
  fuelTypeId    Int
  fuelType      FuelType @relation(fields: [fuelTypeId], references: [id])
  
  date          DateTime
  paidDate      DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@index([clientId, status])
  @@index([date])
}

// ===========================================
// INVENTORY & PURCHASES
// ===========================================

model Purchase {
  id        Int      @id @default(autoincrement())
  litres    Decimal
  unitCost  Decimal
  totalCost Decimal
  supplier  String?
  invoiceNo String?
  note      String?
  status    String   @default("pending") // pending, unloaded
  
  // Relations
  tankId    Int
  tank      Tank     @relation(fields: [tankId], references: [id])
  
  date      DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([tankId, date])
}

// ===========================================
// SYSTEM & AUDIT
// ===========================================

model AuditLog {
  id         Int      @id @default(autoincrement())
  action     String
  entityType String
  entityId   Int
  oldValues  String?  // JSON string
  newValues  String?  // JSON string
  reason     String?
  userId     Int?
  sessionId  String?
  
  timestamp  DateTime @default(now())

  @@index([entityType, entityId])
  @@index([timestamp])
  @@index([action])
  @@map("audit_logs")
}

// ===========================================
// DAILY SUMMARIES (OPTIONAL - FOR PERFORMANCE)
// ===========================================

model DailySummary {
  id              Int      @id @default(autoincrement())
  date            DateTime @unique
  
  // Sales
  totalRevenue    Decimal  @default(0)
  totalLitres     Decimal  @default(0)
  totalProfit     Decimal  @default(0)
  
  // Payments
  cashReceived    Decimal  @default(0)
  onlineReceived  Decimal  @default(0)
  creditSales     Decimal  @default(0)
  creditPayments  Decimal  @default(0)
  
  // Counts
  salesCount      Int      @default(0)
  clientsCount    Int      @default(0)
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@index([date])
}
